---
// import Image from '~/components/common/Image.astro';

import type { Hero as Props } from '~/types';
import Carrousel from '~/components/react/Carrousel.jsx';

const slidesData = [
  {
    title: "Perfecto para trabajar desde casa",
    color_title: "text-blue-700 dark:text-sky-600 highlight",
    description: "Trabaja desde casa con la confianza de una red confieble de fibra óptica.",
    imageSrc: "images/remote.jpg", // Usa la variable importada correctamente
    imageAlt: "Descripción de la imagen",
  },
  // Otros slides si los tienes...
  {
    title: "Mirar contenido sin interrupciones",
    color_title: "text-violet-800 dark:text-violet-800 highlight",
    description: "Disfruta de mirar tus aplicaciones de streaming en alta resolución.",
    imageSrc: "images/contenido.jpg", // Usa la variable importada correctamente
    imageAlt: "Descripción de la imagen",
  },
  {
    title: "Juega sin límites ni interrupciones",
    color_title: "text-green-700 dark:text-green-700 highlight",
    description: "Disfruta de una conexión estable y con baja latencia.",
    imageSrc: "images/play.jpg", // Usa la variable importada correctamente
    imageAlt: "Descripción de la imagen",
  },
  {
    title: "Descarga tu contenido favorito a toda velocidad",
    color_title: "text-orange-600 dark:text-orange-600 highlight",
    description: "Descarga todo el contenido que necesitas sin cargos extra.",
    imageSrc: "images/lazy.jpg", // Usa la variable importada correctamente
    imageAlt: "Descripción de la imagen",
  },
];

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  // title = 'Conectando tu mundo a la velocidad de la luz',
  // subtitle = 'GigaNet es la mejor solución para tus necesidades de conectividad',
  tagline,

  content = await Astro.slots.render('content'),
  // image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 md:py-20">
      <div class="text-center pb-10 md:pb-16 max-w-5xl mx-auto">
        {
          tagline && (
            <p
              class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {
            subtitle && (
              <p
                class="text-xl text-muted mb-6 dark:text-slate-300 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
                set:html={subtitle}
              />
            )
          }
          <!-- {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          } -->
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      <div
        class="intersect-once intercept-no-queue intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
      >
        <Carrousel slides={slidesData} duration={5000} client:load/>
      </div>
    </div>
  </div>
</section>
