---
import { Icon } from 'astro-icon/components';
import Button from '~/components/ui/Button.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Pricing as Props } from '~/types';

const {
  title = '',
  subtitle = '',
  tagline = '',
  prices = [],

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />
  <div class="flex items-stretch justify-center">
    <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
      {
        prices &&
          prices.map(({ title, subtitle, price, period, items, callToAction, hasRibbon = false, ribbonTitle }) => (
            <div class="flex justify-center">
              <div class="relative flex w-full max-w-sm">
                {price && period && (
                  <div class="rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 shadow-lg transition-transform duration-300 ease-in-out transform hover:bg-blue-100 dark:hover:bg-slate-800 p-6 flex flex-col justify-between text-center">
                    
                    {hasRibbon && ribbonTitle && (
                      <div class="absolute top-0 right-0 transform translate-x-1 -translate-y-1">
                        <span class="bg-green-700 text-white text-xs font-bold uppercase px-3 py-1 rounded-bl-md">
                          {ribbonTitle}
                        </span>
                      </div>
                    )}
                    
                    <div class="px-2 py-4">
                      {title && (
                        <h3 class="text-xl font-semibold uppercase leading-6 tracking-wide mb-2">{title}</h3>
                      )}
                      {subtitle && <p class="font-light sm:text-lg text-gray-600 dark:text-slate-400">{subtitle}</p>}
                      <div class="my-6">
                        <div class="flex items-center justify-center text-center mb-1">
                          <span class="text-5xl">$</span>
                          <span class="text-6xl font-extrabold">{price}</span>
                        </div>
                        <span class="text-base leading-6 lowercase text-gray-600 dark:text-slate-400">{period}</span>
                      </div>
                      {items && (
                        <ul class="my-4 space-y-2 text-left">
                          {items.map(
                            ({ description, icon }) =>
                              description && (
                                <li class="flex items-start space-x-3 leading-7">
                                  <div class="rounded-full bg-primary mt-1 p-2">
                                    <Icon name={icon ? icon : 'tabler:check'} class="w-5 h-5 text-white" />
                                  </div>
                                  <span class="text-gray-800 dark:text-slate-300">{description}</span>
                                </li>
                              )
                          )}
                        </ul>
                      )}
                    </div>
                    {callToAction && (
                      <div class="flex justify-center mt-4">
                        {typeof callToAction === 'string' ? (
                          <Fragment set:html={callToAction} />
                        ) : (
                          callToAction &&
                          callToAction.href && <Button {...(hasRibbon ? { variant: 'primary' } : {})} {...callToAction} />
                        )}
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          ))
      }
    </div>
  </div>
</WidgetWrapper>

